import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useCart } from '../../application/contexts/CartContext';
import { PhoneInput } from 'react-international-phone';
import 'react-international-phone/style.css';
import './CheckoutPage.css';

// Environment variables
const WHATSAPP_NUMBER = import.meta.env.VITE_WHATSAPP_NUMBER || '5511999999999';

/**
 * Checkout Page
 * Handles order finalization with WhatsApp or PIX payment options
 */
export function CheckoutPage() {
  const { cart, updateQuantity, removeFromCart, total, clearCart } = useCart();
  const navigate = useNavigate();
  const [paymentMethod, setPaymentMethod] = useState(null); // 'whatsapp' or 'pix'
  const [email, setEmail] = useState('');
  const [phone, setPhone] = useState('');
  const [showPixForm, setShowPixForm] = useState(false);
  const [pixQrCode, setPixQrCode] = useState(null);
  const [isProcessingPayment, setIsProcessingPayment] = useState(false);
  const [showConfirmationModal, setShowConfirmationModal] = useState(false);

  const handleQuantityChange = (productId, newQuantity) => {
    if (isProcessingPayment) return; // Prevent changes during payment
    if (newQuantity >= 1) {
      updateQuantity(productId, newQuantity);
    }
  };

  const handleRemove = (productId) => {
    if (isProcessingPayment) return; // Prevent changes during payment
    removeFromCart(productId);
  };

  const generateWhatsAppMessage = (includeContactInfo = false) => {
    let message = '*Pedido VZ Dolci*%0A%0A';
    let total = 0;
    
    // Single iteration to build message and calculate total
    cart.forEach(item => {
      const itemTotal = item.getTotal();
      total += itemTotal;
      message += `${item.product.name} x${item.quantity} - R$ ${itemTotal.toFixed(2)}%0A`;
    });
    
    message += `%0A*Total: R$ ${total.toFixed(2)}*`;

    if (includeContactInfo && (email || phone)) {
      message += `%0A%0A*Forma de Pagamento:* PIX`;
      if (email) {
        message += `%0A*Email:* ${email}`;
      }
      if (phone) {
        message += `%0A*Telefone:* ${phone}`;
      }
    }
    
    return message;
  };

  const handleWhatsAppCheckout = () => {
    if (cart.length === 0) {
      alert('Seu carrinho est√° vazio!');
      return;
    }

    setIsProcessingPayment(true);
    setPaymentMethod('whatsapp');

    const message = generateWhatsAppMessage(false);
    const whatsappLink = `https://wa.me/${WHATSAPP_NUMBER}?text=${message}`;
    window.open(whatsappLink, '_blank');
    
    // Show confirmation modal
    setShowConfirmationModal(true);
  };

  const handlePixCheckout = () => {
    if (cart.length === 0) {
      alert('Seu carrinho est√° vazio!');
      return;
    }

    setIsProcessingPayment(true);
    setPaymentMethod('pix');
    setShowPixForm(true);
  };

  const handlePixPaymentConfirm = () => {
    // Validate that at least one contact method is provided
    const hasEmail = email.trim().length > 0;
    const phoneDigits = phone ? phone.replace(/\D/g, '') : '';
    // Phone is valid if it has 10+ digits (br number is usually 11 digits with area code)
    // Consider phone entered if there are more digits than just the country code
    const hasPhone = phoneDigits.length >= 10;
    
    if (!hasEmail && !hasPhone) {
      alert('Por favor, informe pelo menos um m√©todo de contato (email ou telefone)!');
      return;
    }

    // Email validation if provided
    if (hasEmail) {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(email)) {
        alert('Por favor, informe um email v√°lido!');
        return;
      }
    }

    // Phone validation: if user started entering phone but incomplete
    // Only validate if there are digits beyond 2 (country code like "55")
    if (phoneDigits.length > 2 && phoneDigits.length < 10) {
      alert('Por favor, informe um telefone v√°lido!');
      return;
    }

    // Generate a simple PIX QR Code (in a real scenario, this would be generated by a backend)
    const pixCode = `00020126580014BR.GOV.BCB.PIX0136${Date.now()}520400005303986540${total.toFixed(2)}5802BR5913VZ Dolci6009SAO PAULO62070503***6304`;
    setPixQrCode(pixCode);

    // Send WhatsApp message in the background (user doesn't see this)
    const message = generateWhatsAppMessage(true);
    const whatsappLink = `https://wa.me/${WHATSAPP_NUMBER}?text=${message}`;
    
    // Open in a hidden/background way (we'll use a timeout and then close it)
    const hiddenWindow = window.open(whatsappLink, '_blank');
    setTimeout(() => {
      if (hiddenWindow) {
        hiddenWindow.close();
      }
    }, 1000);
    
    // Show confirmation modal
    setShowConfirmationModal(true);
  };

  const handlePaymentConfirmation = (completed) => {
    if (completed) {
      // Payment completed - clear cart and reset state, but STAY on checkout page
      clearCart();
      setIsProcessingPayment(false);
      setShowPixForm(false);
      setPixQrCode(null);
      setPaymentMethod(null);
      setEmail('');
      setPhone('');
    } else {
      // Payment not completed - reset state
      setIsProcessingPayment(false);
      setShowPixForm(false);
      setPixQrCode(null);
      setPaymentMethod(null);
      setEmail('');
      setPhone('');
    }
    setShowConfirmationModal(false);
  };

  if (cart.length === 0) {
    return (
      <main>
        <section className="section checkout-section">
          <div className="container">
            <h2 className="section-title">Finalizar Compra</h2>
            <div className="empty-checkout">
              <span className="empty-icon">üõí</span>
              <p>Seu carrinho est√° vazio!</p>
              <button className="btn btn-primary" onClick={() => navigate('/produtos')}>
                Ver Produtos
              </button>
            </div>
          </div>
        </section>
      </main>
    );
  }

  return (
    <main>
      <section className="section checkout-section">
        <div className="container">
          <h2 className="section-title">Finalizar Compra</h2>
          <p className="section-subtitle">Revise seu pedido e escolha a forma de pagamento</p>

          <div className="checkout-container">
            {/* Cart Items */}
            <div className="checkout-items">
              <h3>Itens do Pedido</h3>
              <div className="checkout-items-list">
                {cart.map((item) => (
                  <div key={item.product.id} className="checkout-item">
                    <span className="checkout-item-emoji">{item.product.emoji}</span>
                    
                    <div className="checkout-item-details">
                      <h4>{item.product.name}</h4>
                      <p className="checkout-item-description">{item.product.description}</p>
                      <p className="checkout-item-price">R$ {item.product.price.toFixed(2)} (unidade)</p>
                    </div>
                    
                    <div className="checkout-item-actions">
                      <div className="quantity-controls">
                        <button 
                          className="qty-btn"
                          onClick={() => handleQuantityChange(item.product.id, item.quantity - 1)}
                          disabled={item.quantity <= 1 || isProcessingPayment}
                          aria-label="Diminuir quantidade"
                        >
                          -
                        </button>
                        <span className="quantity">{item.quantity}</span>
                        <button 
                          className="qty-btn"
                          onClick={() => handleQuantityChange(item.product.id, item.quantity + 1)}
                          disabled={isProcessingPayment}
                          aria-label="Aumentar quantidade"
                        >
                          +
                        </button>
                      </div>
                      <button 
                        className="remove-btn"
                        onClick={() => handleRemove(item.product.id)}
                        disabled={isProcessingPayment}
                        title="Remover item"
                        aria-label="Remover item"
                      >
                        üóëÔ∏è
                      </button>
                    </div>
                    
                    <div className="checkout-item-total">
                      Subtotal: R$ {item.getTotal().toFixed(2)}
                    </div>
                  </div>
                ))}
              </div>

              <div className="checkout-total">
                <strong>Total do Pedido:</strong>
                <strong className="total-amount">R$ {total.toFixed(2)}</strong>
              </div>
            </div>

            {/* Payment Options */}
            <div className="checkout-payment">
              <h3>Forma de Pagamento</h3>
              
              {!showPixForm ? (
                <div className="payment-options">
                  <button 
                    className="payment-option whatsapp-option"
                    onClick={handleWhatsAppCheckout}
                    disabled={isProcessingPayment}
                  >
                    <span className="payment-icon">üí¨</span>
                    <div className="payment-option-content">
                      <h4>WhatsApp</h4>
                      <p>Finalize seu pedido enviando uma mensagem</p>
                    </div>
                  </button>

                  <button 
                    className="payment-option pix-option"
                    onClick={handlePixCheckout}
                    disabled={isProcessingPayment}
                  >
                    <span className="payment-icon">üí≥</span>
                    <div className="payment-option-content">
                      <h4>PIX</h4>
                      <p>Pague agora com PIX e receba confirma√ß√£o</p>
                    </div>
                  </button>
                </div>
              ) : (
                <div className="pix-payment-section">
                  {!pixQrCode ? (
                    <form className="pix-form" onSubmit={(e) => {
                      e.preventDefault();
                      handlePixPaymentConfirm();
                    }}>
                      <h4>Informa√ß√µes de Contato</h4>
                      <p>Informe pelo menos um m√©todo de contato (email ou telefone):</p>
                      <input
                        type="email"
                        className="contact-input"
                        placeholder="Email (exemplo@dominio.com)"
                        value={email}
                        onChange={(e) => setEmail(e.target.value)}
                        autoComplete="email"
                      />
                      <PhoneInput
                        defaultCountry="br"
                        className="phone-input-container"
                        placeholder="Telefone"
                        value={phone}
                        onChange={(phone) => setPhone(phone)}
                      />
                      <div className="pix-form-actions">
                        <button 
                          type="button"
                          className="btn btn-secondary"
                          onClick={() => {
                            setShowPixForm(false);
                            setPaymentMethod(null);
                            setEmail('');
                            setPhone('');
                          }}
                        >
                          Voltar
                        </button>
                        <button 
                          type="submit"
                          className="btn btn-primary"
                        >
                          Gerar QR Code PIX
                        </button>
                      </div>
                    </form>
                  ) : (
                    <div className="pix-qrcode-section">
                      <h4>QR Code PIX</h4>
                      <div className="qrcode-placeholder">
                        <div className="qrcode-box">
                          {/* Simple visual representation - in production, use a library like qrcode.react */}
                          <div className="qrcode-pattern">
                            <div></div><div></div><div></div>
                            <div></div><div></div><div></div>
                            <div></div><div></div><div></div>
                          </div>
                          <p className="qrcode-label">QR CODE PIX</p>
                        </div>
                      </div>
                      <div className="pix-code-copy">
                        <p>C√≥digo PIX:</p>
                        <div className="code-box">
                          <code>{pixQrCode.substring(0, 50)}...</code>
                          <button 
                            className="copy-btn"
                            onClick={() => {
                              navigator.clipboard.writeText(pixQrCode);
                              alert('C√≥digo PIX copiado!');
                            }}
                          >
                            üìã Copiar
                          </button>
                        </div>
                      </div>
                      <div className="pix-instructions">
                        <p><strong>Instru√ß√µes:</strong></p>
                        <ol>
                          <li>Abra o app do seu banco</li>
                          <li>Escolha pagar com PIX</li>
                          <li>Escaneie o QR Code ou cole o c√≥digo PIX</li>
                          <li>Confirme o pagamento de R$ {total.toFixed(2)}</li>
                        </ol>
                        <p className="contact-confirmation">
                          ‚úÖ Voc√™ receber√° confirma√ß√£o quando seu pedido estiver pronto!
                          <br /><strong>Email:</strong> {email}
                          <br /><strong>Telefone:</strong> {phone}
                        </p>
                      </div>
                    </div>
                  )}
                </div>
              )}
            </div>
          </div>
        </div>
      </section>

      {/* Confirmation Modal */}
      {showConfirmationModal && (
        <div className="modal-overlay" onClick={(e) => {
          if (e.target.className === 'modal-overlay') {
            // Prevent closing modal by clicking outside
          }
        }}>
          <div className="modal-content">
            <h3>Confirma√ß√£o de Pagamento</h3>
            <p>
              {paymentMethod === 'whatsapp' 
                ? 'Voc√™ finalizou a compra via WhatsApp?' 
                : 'Voc√™ concluiu o pagamento via PIX?'}
            </p>
            <div className="modal-actions">
              <button 
                className="btn btn-secondary"
                onClick={() => handlePaymentConfirmation(false)}
              >
                N√£o, cancelar
              </button>
              <button 
                className="btn btn-primary"
                onClick={() => handlePaymentConfirmation(true)}
              >
                Sim, conclu√≠
              </button>
            </div>
          </div>
        </div>
      )}
    </main>
  );
}
